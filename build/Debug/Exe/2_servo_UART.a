;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.04.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 28
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 char status,data;
; 0000 0039 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003A data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003C    {
; 0000 003D    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003E #if RX_BUFFER_SIZE == 256
; 0000 003F    // special case for receiver buffer size=256
; 0000 0040    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0041 #else
; 0000 0042    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0043    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0044       {
; 0000 0045       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 0046       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0047       }
; 0000 0048 #endif
; 0000 0049    }
;PCODE: $00000029 VOL: 0
; 0000 004A }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0051 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0052 char data;
; 0000 0053 while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054 data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0055 #if RX_BUFFER_SIZE != 256
; 0000 0056 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0057 #endif
; 0000 0058 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0059 --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 005A #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 005B return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005C }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;
;void USART_Transmit( unsigned char data ) //Функция отправки данных
; 0000 0067 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0068     while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
;PCODE: $0000004C VOL: 0
;	data -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0069         UDR = data; //Начало передачи данных
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006A }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;
;
;void main(void)
; 0000 006F {
;PCODE: $00000058 VOL: 0
; 0000 0070 // Declare your local variables here
; 0000 0071 
; 0000 0072 // Input/Output Ports initialization
; 0000 0073 // Port B initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0078 
; 0000 0079 // Port C initialization
; 0000 007A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007B DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007C // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007E 
; 0000 007F // Port D initialization
; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0083 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0084 
; 0000 0085 // Timer/Counter 0 initialization
; 0000 0086 // Clock source: System Clock
; 0000 0087 // Clock value: Timer 0 Stopped
; 0000 0088 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0089 TCNT0=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008A 
; 0000 008B // Timer/Counter 1 initialization
; 0000 008C // Clock source: System Clock
; 0000 008D // Clock value: Timer1 Stopped
; 0000 008E // Mode: Normal top=0xFFFF
; 0000 008F // OC1A output: Disconnected
; 0000 0090 // OC1B output: Disconnected
; 0000 0091 // Noise Canceler: Off
; 0000 0092 // Input Capture on Falling Edge
; 0000 0093 // Timer1 Overflow Interrupt: Off
; 0000 0094 // Input Capture Interrupt: Off
; 0000 0095 // Compare A Match Interrupt: Off
; 0000 0096 // Compare B Match Interrupt: Off
; 0000 0097 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0098 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0099 TCNT1H=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009A TCNT1L=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009B ICR1H=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009C ICR1L=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009D OCR1AH=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 009E OCR1AL=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009F OCR1BH=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A0 OCR1BL=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A1 
; 0000 00A2 // Timer/Counter 2 initialization
; 0000 00A3 // Clock source: System Clock
; 0000 00A4 // Clock value: Timer2 Stopped
; 0000 00A5 // Mode: Normal top=0xFF
; 0000 00A6 // OC2 output: Disconnected
; 0000 00A7 ASSR=0<<AS2;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A8 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A9 TCNT2=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00AA OCR2=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00AB 
; 0000 00AC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AD TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00AE 
; 0000 00AF // External Interrupt(s) initialization
; 0000 00B0 // INT0: Off
; 0000 00B1 // INT1: Off
; 0000 00B2 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B3 
; 0000 00B4 // USART initialization
; 0000 00B5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00B6 // USART Receiver: On
; 0000 00B7 // USART Transmitter: Off
; 0000 00B8 // USART Mode: Asynchronous
; 0000 00B9 // USART Baud Rate: 9600
; 0000 00BA UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BB UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00BC UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00BD UBRRH=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BE UBRRL=0x33;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00BF 
; 0000 00C0 // Analog Comparator initialization
; 0000 00C1 // Analog Comparator: Off
; 0000 00C2 // The Analog Comparator's positive input is
; 0000 00C3 // connected to the AIN0 pin
; 0000 00C4 // The Analog Comparator's negative input is
; 0000 00C5 // connected to the AIN1 pin
; 0000 00C6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00C7 SFIOR=(0<<ACME);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00C8 
; 0000 00C9 // ADC initialization
; 0000 00CA // ADC disabled
; 0000 00CB ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00CC 
; 0000 00CD // SPI initialization
; 0000 00CE // SPI disabled
; 0000 00CF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D0 
; 0000 00D1 // TWI initialization
; 0000 00D2 // TWI disabled
; 0000 00D3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D4 
; 0000 00D5 // Global enable interrupts
; 0000 00D6 #asm("sei")
;PCODE: $0000009D VOL: 0
	sei
;PCODE: $0000009E VOL: 0
; 0000 00D7 
; 0000 00D8 while (1)
;PCODE: $0000009F VOL: 0
; 0000 00D9       {
; 0000 00DA       // Place your code here
; 0000 00DB       USART_Transmit('k');
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00DC       delay_ms(200);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00DD       }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DE }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
